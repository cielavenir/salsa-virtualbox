Index: src/VBox/Devices/Graphics/DevVGA-SVGA3d-hlp.cpp
===================================================================
--- a/src/VBox/Devices/Graphics/DevVGA-SVGA3d-hlp.cpp	(revision 146687)
+++ b/src/VBox/Devices/Graphics/DevVGA-SVGA3d-hlp.cpp	(revision 146688)
@@ -39,6 +39,12 @@
 {
     /** Version token. */
     SVGA3dShaderVersion version;
+
+    SVGA3dShaderOpCodeType currentOpcode;
+    union
+    {
+        SVGA3DOpDclArgs *pDclArgs;
+    } u;
 } VMSVGA3DSHADERPARSECONTEXT;
 
 /** Callback which parses a parameter token.
@@ -160,6 +166,15 @@
     Log3(("Dest: type %d, r0 %d, shfScale %d, dstMod %d, mask 0x%x, r1 %d, relAddr %d, num %d\n",
         regType, dest.s.reserved0, dest.s.shfScale, dest.s.dstMod, dest.s.mask, dest.s.reserved1, dest.s.relAddr, dest.s.num));
 
+    if (pCtx->currentOpcode == SVGA3DOP_DCL && regType == SVGA3DREG_SAMPLER)
+    {
+        if (pCtx->u.pDclArgs->s2.s1.type == SVGA3DSAMP_UNKNOWN)
+        {
+            Log3(("Replacing SVGA3DSAMP_UNKNOWN with SVGA3DSAMP_2D\n"));
+            pCtx->u.pDclArgs->s2.s1.type = SVGA3DSAMP_2D;
+        }
+    }
+
     return vmsvga3dShaderParseRegOffset(pCtx, false, regType, dest.s.num);
 }
 
@@ -300,9 +315,9 @@
 /* Parse the shader code
  * https://docs.microsoft.com/en-us/windows-hardware/drivers/display/shader-code-format
  */
-int vmsvga3dShaderParse(SVGA3dShaderType type, uint32_t cbShaderData, uint32_t const* pShaderData)
+int vmsvga3dShaderParse(SVGA3dShaderType type, uint32_t cbShaderData, uint32_t* pShaderData)
 {
-    uint32_t const* paTokensStart = (uint32_t*)pShaderData;
+    uint32_t *paTokensStart = (uint32_t*)pShaderData;
     uint32_t const cTokens = cbShaderData / sizeof(uint32_t);
 
     ASSERT_GUEST_RETURN(cTokens * sizeof(uint32_t) == cbShaderData, VERR_INVALID_PARAMETER);
@@ -341,8 +356,8 @@
     ASSERT_GUEST_RETURN(ctx.version.s.major >= 2 && ctx.version.s.major <= 4, VERR_PARSE_ERROR);
 
     /* Scan the tokens. Immediately return an error code on any unexpected data. */
-    uint32_t const* paTokensEnd = &paTokensStart[cTokens];
-    uint32_t const* pToken = &paTokensStart[1]; /* Skip the version token. */
+    uint32_t *paTokensEnd = &paTokensStart[cTokens];
+    uint32_t *pToken = &paTokensStart[1]; /* Skip the version token. */
     bool  bEndTokenFound = false;
     while (pToken < paTokensEnd)
     {
@@ -366,11 +381,16 @@
             break;
         }
 
+        ctx.currentOpcode = (SVGA3dShaderOpCodeType)token.s1.op;
+
         /* If this instrution is in the aOps table. */
         if (token.s1.op <= SVGA3DOP_BREAKP)
         {
             VMSVGA3DSHADERPARSEOP const* pOp = &aOps[token.s1.op];
 
+            if (ctx.currentOpcode == SVGA3DOP_DCL)
+                ctx.u.pDclArgs = (SVGA3DOpDclArgs *)&pToken[1];
+
             /* cInstLen can be greater than pOp->Length.
              * W10 guest sends a vertex shader MUL instruction with length 4.
              * So figure out the actual number of valid parameters.
Index: src/VBox/Devices/Graphics/DevVGA-SVGA3d-internal.h
===================================================================
--- a/src/VBox/Devices/Graphics/DevVGA-SVGA3d-internal.h	(revision 146687)
+++ b/src/VBox/Devices/Graphics/DevVGA-SVGA3d-internal.h	(revision 146688)
@@ -1423,7 +1423,7 @@
                            uint32_t iMipmap);
 #endif
 
-int vmsvga3dShaderParse(SVGA3dShaderType type, uint32_t cbShaderData, uint32_t const *pShaderData);
+int vmsvga3dShaderParse(SVGA3dShaderType type, uint32_t cbShaderData, uint32_t *pShaderData);
 void vmsvga3dShaderLogRel(char const *pszMsg, SVGA3dShaderType type, uint32_t cbShaderData, uint32_t const *pShaderData);
 
 #endif /* !VBOX_INCLUDED_SRC_Graphics_DevVGA_SVGA3d_internal_h */
